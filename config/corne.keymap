/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ {
    macros {
        zed_alt_tab: zed_alt_tab {
            label = "ZM_zed_alt_tab";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LALT>
                ;
        };
        zed_rub_out: zed_rub_out {
            label = "ZM_zed_rub_out";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp BSPC>
                , <&macro_release &kp LCTRL>
                ;
        };
        zed_assignment: zed_assignment {
            label = "ZM_zed_assignment";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp COLON>
                , <&macro_tap &kp EQUAL>
                ;
        };		
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_EQUAL {
            timeout-ms = <45>;
            key-positions = <0 9>;
            bindings = <&kp EQUAL>;
        };
        combo_ASSIGNMENT {
            timeout-ms = <45>;
            key-positions = <2 7>;
            bindings = <&zed_assignment>;
        };
        combo_LPAR {
            timeout-ms = <71>;
            key-positions = <0 13>;
            bindings = <&kp LPAR>;
        };
        combo_RPAR {
            timeout-ms = <71>;
            key-positions = <6 19>;
            bindings = <&kp RPAR>;
        };
        combo_LCURLY {
            timeout-ms = <71>;
            key-positions = <6 16>;
            bindings = <&kp LEFT_BRACE>;
        };
        combo_RCURLY {
            timeout-ms = <71>;
            key-positions = <9 22>;
            bindings = <&kp RIGHT_BRACE>;
        };
        combo_LBRACKET {
            timeout-ms = <71>;
            key-positions = <2 15>;
            bindings = <&kp LEFT_BRACKET>;
        };	
        combo_RBRACKET {
            timeout-ms = <71>;
            key-positions = <8 21>;
            bindings = <&kp RIGHT_BRACKET>;
        };
	combo_LESSTHAN {
	    timeout-ms = <71>;
	    key-positions = <1 15>;
	    bindings = <&kp LESS_THAN>;
	};
	combo_GREATERTHAN {
	    timeout-ms = <71>;
	    key-positions = <7 20>;
	    bindings = <&kp GREATER_THAN>;
	};
        combo_PAGEUP {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp PAGE_UP>;
        }; 
        combo_PAGEDOWN {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp PAGE_DOWN>;
        };
	combo_QUOTE {
	    timeout-ms = <50>;
	    key-positions = <13 7>;
	    bindings = <&kp SINGLE_QUOTE>;
	};
	combo_DOUBLEQUOTE {
	    timeout-ms = <50>;
	    key-positions = <13 8>;
	    bindings = <&kp DOUBLE_QUOTES>;
	};
        combo_HOME {
            timeout-ms = <50>;
            key-positions = <5 6 7>;
            bindings = <&kp HOME>;
        };
        combo_END {
            timeout-ms = <70>;
            key-positions = <30 31 32>;
            bindings = <&kp END>;
        };
	combo_RUBOUT {
	    timeout-ms = <45>;
	    key-positions = <16 17>;
	    bindings = <&kp LC(BSPC)>;
	};
	combo_BACKSPACE {
	    timeout-ms = <45>;
	    key-positions = <18 19>;
	    bindings = <&kp BSPC>;
	};
        combo_RGUI {
	    // This is a quick way to strike the Compose key
	    // (when the Compose key is mapped to RGUI
            timeout-ms = <50>;
            key-positions = <13 14 15 16>;
            bindings = <&kp RGUI>;
        };	
    };
};


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  W  |  L  |  Y  |  P  |  B  |   |  Z  |  F   |  O  |  U  |  '  | BKSP |
// | CTRL |  C  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  A  |  '   |
// | SHFT |  Q  |  J  |  V  |  D  |  K  |   |  X  |  H   |  /  |  ,  |  .  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &mt LALT TAB   &kp W &kp L &kp Y &kp P &kp B        &kp Z &kp F  &kp O     &kp U     &kp SEMI  &mt RALT BSPC
   &kp LCTRL      &kp C &kp R &kp S &kp T &kp G        &kp M &kp N  &kp E     &kp I     &kp A     &mt RCTRL SEMI
   &kp LSHFT      &kp Q &kp J &kp V &kp D &kp K        &kp X &kp H  &kp FSLH  &kp COMMA &kp DOT   &kp ESC
                  &kp LGUI &mo 1 &mt LSHFT RET         &kp SPACE    &mo 2     &kp LGUI
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
